{"version":3,"sources":["reportWebVitals.js","index.js","WordSearch.js","win.mp3"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","createElement","StrictMode","WordSearch","gridSize","words","crosswordWordsSize","oriented","Crossword","_classCallCheck","this","crosswordWords","inCrossword","Array","fill","_Crossword","from","length","maxWordLength","reduce","max","word","Math","console","log","process","exit","_createClass","key","value","index","isPlaced","count","x","floor","random","y","isPossibleDiagonal","wordPlace","isPossibleVertical","isPossibleHorizontal","printCrossword","i","j","randomChar","join","String","fromCharCode","val","Square","data","onSquareClick","id","className","onClick","RowBoard","_ref2","rowNo","crossword","map","Board","_ref3","row","_useState","useState","_useState2","_slicedToArray","genWordList","setGenWordList","_useState3","_useState4","setCrossword","_useState5","_useState6","setMaxWordLength","_useState7","_useState8","remainingWords","setRemainingWords","_useState9","_useState10","WordList","setWordList","_useState11","_useState12","selectedWords","setSelectedWords","_useState13","_useState14","colors","setColors","_useState15","_useState16","charcolors","setCharcolors","_useState17","_useState18","colorselector","setColorSelector","_useState19","_useState20","filled","setfilled","audioRef","useRef","useEffect","obj","createCrossword","JSON","parse","stringify","includes","forEach","selectedWord","square","style","backgroundColor","color","congMessage","p","getElementsByTagName","innerHTML","font","margin","button","height","width","bgcolor","borderColor","current","play","Fragment","selection","filter","indexOf","slice","concat","_toConsumableArray","ref","src","winSound","type","module","exports"],"mappings":"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","file":"static/js/main.19a869f8.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\n//import App from './App';\nimport WordSearch from './WordSearch';\nimport reportWebVitals from './reportWebVitals';\n\n//const root = ReactDOM.createRoot(document.getElementById('root'));\n\nReactDOM.createRoot(document.getElementById('root')).render(<React.StrictMode><WordSearch /></React.StrictMode>);\n/*\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);*/\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { useState, useEffect ,useRef} from 'react';\r\nimport './WordSearch.css';\r\nimport winSound from './win.mp3';\r\nconst gridSize = 10;\r\nconst words = [\"monkey\", \"owl\", \"frog\", \"spider\", \"tortoise\", \"snail\"];\r\n\r\nconst crosswordWordsSize = 6;\r\n\r\nconst oriented = {\r\n  NONE: 0,\r\n  X: 1,\r\n  Y: 2,\r\n  Z: 3\r\n};\r\n\r\nclass Crossword {\r\n  constructor() {\r\n    this.crosswordWords = words;\r\n    this.inCrossword = new Array(crosswordWordsSize).fill(true);\r\n    this._Crossword = Array.from({ length: gridSize }, () => new Array(gridSize).fill('-'));\r\n    this.maxWordLength = this.crosswordWords.reduce((max, word) => Math.max(max, word.length), 0);\r\n\r\n    if (this.maxWordLength > gridSize) {\r\n      console.log(\"Invalid params\");\r\n      process.exit(0);\r\n    }\r\n  }\r\n\r\n  createCrossword() {\r\n    let index = crosswordWordsSize;\r\n\r\n    while (index !== 0) {\r\n      let isPlaced = false;\r\n      let count = 0;\r\n\r\n      while (!isPlaced) {\r\n        if (count > 200) {\r\n          console.log(\"Not Possible\");\r\n          process.exit(0);\r\n        }\r\n\r\n        const x = Math.floor(Math.random() * gridSize);\r\n        const y = Math.floor(Math.random() * gridSize);\r\n\r\n        if (this.isPossibleDiagonal(x, y, index - 1)) {\r\n          this.wordPlace(x, y, index - 1, oriented.Z);\r\n          isPlaced = true;\r\n          this.inCrossword[index - 1] = true;\r\n        } else if (this.isPossibleVertical(x, y, index - 1)) {\r\n          this.wordPlace(x, y, index - 1, oriented.Y);\r\n          isPlaced = true;\r\n          this.inCrossword[index - 1] = true;\r\n        } else if (this.isPossibleHorizontal(x, y, index - 1)) {\r\n          this.wordPlace(x, y, index - 1, oriented.X);\r\n          isPlaced = true;\r\n          this.inCrossword[index - 1] = true;\r\n        }\r\n\r\n        count++;\r\n      }\r\n\r\n      index--;\r\n    }\r\n    this.printCrossword();\r\n\r\n    for (let i = 0; i < gridSize; i++) {\r\n      for (let j = 0; j < gridSize; j++) {\r\n        if (this._Crossword[i][j] === '-') {\r\n          this._Crossword[i][j] = this.randomChar();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  printCrossword() {\r\n    for (let i = 0; i < gridSize; i++) {\r\n      console.log(this._Crossword[i].join('  '));\r\n      console.log('\\n');\r\n    }\r\n  }\r\n\r\n  randomChar() {\r\n    return String.fromCharCode(97 + Math.floor(Math.random() * 26));\r\n  }\r\n\r\n  wordPlace(x, y, index, val) {\r\n    switch (val) {\r\n      case oriented.X:\r\n        for (let i = 0; i < this.crosswordWords[index].length; i++) {\r\n          this._Crossword[i + x][y] = this.crosswordWords[index][i];\r\n        }\r\n        break;\r\n      case oriented.Y:\r\n        for (let i = 0; i < this.crosswordWords[index].length; i++) {\r\n          this._Crossword[x][i + y] = this.crosswordWords[index][i];\r\n        }\r\n        break;\r\n      case oriented.Z:\r\n        for (let i = 0; i < this.crosswordWords[index].length; i++) {\r\n          this._Crossword[x + i][y + i] = this.crosswordWords[index][i];\r\n        }\r\n        break;\r\n      default: return;\r\n    }\r\n  }\r\n\r\n  isPossibleHorizontal(x, y, index) {\r\n    let i;\r\n    for (i = x; i - x < this.crosswordWords[index].length && i < gridSize; i++) {\r\n      if (this._Crossword[i][y] !== '-') {\r\n        return false;\r\n      }\r\n    }\r\n    return i < gridSize;\r\n  }\r\n\r\n  isPossibleVertical(x, y, index) {\r\n    let i;\r\n    for (i = y; i - y < this.crosswordWords[index].length && i < gridSize; i++) {\r\n      if (this._Crossword[x][i] !== '-') {\r\n        return false;\r\n      }\r\n    }\r\n    return i < gridSize;\r\n  }\r\n\r\n  isPossibleDiagonal(x, y, index) {\r\n    let i;\r\n    for (i = 0; i < this.crosswordWords[index].length && i + x < gridSize && i + y < gridSize; i++) {\r\n      if (this._Crossword[x + i][y + i] !== '-') {\r\n        return false;\r\n      }\r\n    }\r\n    return i + x < gridSize && i + y < gridSize;\r\n  }\r\n}\r\nfunction Square({ value, data, onSquareClick }) {\r\n  return (\r\n    <button id={value} className={`square`} onClick={() => onSquareClick(value)}>\r\n      {data}\r\n    </button>\r\n  );\r\n}\r\n\r\n\r\nfunction RowBoard({ rowNo, crossword, onSquareClick }) {\r\n  return (\r\n    <span className={`row`}>\r\n      {crossword[rowNo].map((value, index) => (\r\n        <Square\r\n          key={index + rowNo * gridSize}\r\n          value={index + rowNo * gridSize}\r\n          data={crossword[rowNo][index]}\r\n          onSquareClick={onSquareClick}\r\n        ></Square>\r\n      ))}\r\n    </span>\r\n  );\r\n}\r\n\r\nfunction Board({ crossword, onSquareClick }) {\r\n  return (\r\n    <div className=\"board\">\r\n      {crossword.map((row, index) => (\r\n        <RowBoard\r\n          key={index}\r\n          rowNo={index}\r\n          crossword={crossword}\r\n          onSquareClick={onSquareClick}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function WordSearch() {\r\n  const [genWordList, setGenWordList] = useState([]);\r\n  const [_Crossword, setCrossword] = useState([]);\r\n  const [maxWordLength, setMaxWordLength] = useState(0);\r\n  const [remainingWords, setRemainingWords] = useState(1);\r\n  const [WordList, setWordList] = useState('');\r\n  const [selectedWords,setSelectedWords] = useState([]);\r\n  const [colors, setColors] = useState([]);\r\n  const [charcolors,setCharcolors] = useState([]);\r\n  const [colorselector, setColorSelector] = useState(0);\r\n  const [filled,setfilled] = useState([]);\r\n  const audioRef = useRef(null);\r\n\r\n\r\n  useEffect(() => {\r\n    const obj = new Crossword();\r\n    obj.createCrossword();\r\n    setGenWordList(JSON.parse(JSON.stringify(words)));\r\n    setCrossword(obj._Crossword);\r\n    setMaxWordLength(obj.maxWordLength);\r\n    setRemainingWords(words.length)\r\n    setColors(['#ff445c','#44FFE7']);\r\n    setCharcolors(['#ffffff','#000000']);\r\n    setfilled([].fill(false,0,gridSize*gridSize-1));\r\n  }, []);\r\n\r\n  // function replayGame() {\r\n  //   window.location.reload();\r\n  // }\r\n  useEffect(() => {\r\n    // Check if WordList matches any word in genWordList\r\n    if (genWordList.includes(WordList)) {\r\n      // WordList matches one of the words in genWordList\r\n      setRemainingWords(remainingWords - 1);\r\n      setfilled(()=>\r\n      {\r\n        selectedWords.forEach((value)=>{\r\n          filled[value] = true;\r\n        })\r\n        return filled;\r\n\r\n      });\r\n      setSelectedWords([]);\r\n      setWordList('');\r\n      setColorSelector((colorselector+1)%colors.length);\r\n      console.log(colorselector);\r\n    }\r\n\r\n    // Clear the selected word if it reaches maxWordLength\r\n    if (WordList.length === maxWordLength+1) {\r\n      selectedWords.forEach(selectedWord => {\r\n        const square = document.getElementById(selectedWord);\r\n        square.style.backgroundColor = \"rgb(255, 255, 255)\";\r\n        square.style.color = \"rgb(0, 0, 0)\";\r\n      });\r\n      setSelectedWords([]);\r\n      setWordList('');\r\n    }\r\n    if(remainingWords===0)\r\n    {\r\n      const congMessage = document.getElementById('Congratulations');\r\n      const p = congMessage.getElementsByTagName('p');\r\n      congMessage.style.backgroundColor = \"#ff445c\";\r\n      p[0].innerHTML = \"Congratulations!!!\";\r\n      p[1].innerHTML= '<button onClick=window.location.reload()>Replay</button>';\r\n      p[0].style.font =\"italic bold 3rem 'Poppins', sans-serif\";\r\n      p[1].style.font = \"bold 1rem 'Poppins', sans-serif\";\r\n      p[1].style.margin= \"1% 0 0 40%\";\r\n      const button = p[1].getElementsByTagName('button')[0];\r\n      button.style.height = \"1.5rem\";\r\n      button.style.width = \"5rem\";\r\n      button.style.bgcolor = \"#ffffff\"\r\n      button.style.borderColor = \"#888888\";\r\n      button.style.font = \"100 1rem  'Poppins', sans-serif\";\r\n      \r\n      audioRef.current.play();\r\n    }\r\n  }, [genWordList,maxWordLength,selectedWords, WordList, remainingWords,colors,colorselector,filled]);\r\n\r\n  function handleClick(value) {\r\n    if(filled[value])\r\n      return;\r\n    const selection = document.getElementById(value);\r\n    \r\n    // Check if the clicked square is already selected\r\n    if (selectedWords.includes(value)) {\r\n      selection.style.backgroundColor = \"rgb(255, 255, 255)\";\r\n      selection.style.color = \"rgb(0, 0, 0)\";\r\n      // Remove the clicked square from selectedWords\r\n      setSelectedWords(selectedWords.filter(word => word !== value));\r\n      \r\n      // Find the index of the clicked square in WordList\r\n      const index = WordList.indexOf(selection.innerHTML);\r\n      if (index !== -1) {\r\n        // Remove the character at the found index from WordList\r\n        setWordList(WordList.slice(0, index) + WordList.slice(index + 1));\r\n      }\r\n    } else {\r\n      selection.style.backgroundColor = colors[colorselector];\r\n      selection.style.color = charcolors[colorselector];\r\n      // Add the clicked square to selectedWords\r\n      setSelectedWords([...selectedWords, value]);\r\n      // Append the clicked square's content to WordList\r\n      setWordList(WordList + selection.innerHTML);\r\n    }\r\n  }\r\n\r\n\r\n  \r\n  \r\n\r\n  return (\r\n    <>\r\n    <div>\r\n      <div className=\"Title\" >\r\n        <p>WordSearch</p>\r\n      </div>\r\n      <div className=\"Scoreboard\">\r\n        <span><p>To Find</p></span>\r\n        <span ><p id=\"remCount\">{remainingWords}</p> \r\n        </span>\r\n        \r\n      </div>\r\n      </div>\r\n      <Board crossword={_Crossword} onSquareClick={handleClick} />\r\n    <div>\r\n      <span id=\"Congratulations\"><p></p><p></p></span>\r\n    </div>\r\n    <div>\r\n    <audio ref={audioRef}>\r\n      <source src={winSound} type=\"audio/mpeg\" />\r\n    </audio>\r\n  </div>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/win.de7c0cf3.mp3\";"],"sourceRoot":""}